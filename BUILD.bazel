load("@io_bazel_rules_go//go:def.bzl", "go_binary", "go_library")
load("@bazel_gazelle//:def.bzl", "gazelle")
load("//build:run_in_workspace_with_goroot.bzl", "workspace_binary")

package(default_visibility = ["//visibility:public"])

# Update the excludes if you get "unrecognised import path"

# gazelle:prefix sigs.k8s.io/cluster-api-provider-aws
# gazelle:build_file_name BUILD.bazel,BUILD
# gazelle:proto disable_global
# gazelle:exclude vendor/github.com/golang/mock/mockgen/tests/vendor_dep
# gazelle:exclude vendor/golang.org/x/tools/cmd/bundle/testdata
# gazelle:exclude vendor/golang.org/x/tools/cmd/fiximports/testdata
# gazelle:exclude vendor/golang.org/x/tools/cmd/guru/testdata
# gazelle:exclude vendor/golang.org/x/tools/go/analysis/passes/asmdecl/testdata
# gazelle:exclude vendor/golang.org/x/tools/go/analysis/passes/atomic/testdata
# gazelle:exclude vendor/golang.org/x/tools/go/analysis/passes/bools/testdata
# gazelle:exclude vendor/golang.org/x/tools/go/analysis/passes/buildtag/testdata
# gazelle:exclude vendor/golang.org/x/tools/go/analysis/passes/cgocall/testdata
# gazelle:exclude vendor/golang.org/x/tools/go/analysis/passes/composite/testdata
# gazelle:exclude vendor/golang.org/x/tools/go/analysis/passes/copylock/testdata
# gazelle:exclude vendor/golang.org/x/tools/go/analysis/passes/ctrlflow/testdata
# gazelle:exclude vendor/golang.org/x/tools/go/analysis/passes/lostcancel/testdata
# gazelle:exclude vendor/golang.org/x/tools/go/analysis/passes/nilfunc/testdata
# gazelle:exclude vendor/golang.org/x/tools/go/analysis/passes/pkgfact/testdata
# gazelle:exclude vendor/golang.org/x/tools/go/analysis/passes/stdmethods/testdata
# gazelle:exclude vendor/golang.org/x/tools/go/analysis/passes/stdmethods/testdata
# gazelle:exclude vendor/golang.org/x/tools/go/analysis/passes/tests/testdata
# gazelle:exclude vendor/golang.org/x/tools/go/analysis/passes/unsafeptr/testdata
# gazelle:exclude vendor/golang.org/x/tools/go/analysis/passes/unusedresult/testdata
# gazelle:exclude vendor/golang.org/x/tools/go/internal/gccgoimporter/testdata
# gazelle:exclude vendor/golang.org/x/tools/go/internal/gcimporter/testdata
# gazelle:exclude vendor/golang.org/x/tools/go/loader/testdata
# gazelle:exclude vendor/golang.org/x/tools/go/pointer/testdata
# gazelle:exclude vendor/golang.org/x/tools/go/ssa/interp/testdata
# gazelle:exclude vendor/k8s.io/gengo/testdata
# gazelle:resolve go github.com/grpc-ecosystem/grpc-gateway/internal //vendor/github.com/grpc-ecosystem/grpc-gateway/internal:go_default_library
gazelle(
    name = "gazelle",
    command = "fix",
    external = "vendored",
    build_tags = ["integration"],
)

filegroup(
    name = "all-images",
    srcs = [
        "//:manager-image",
    ],
)

workspace_binary(
    name = "lint",
    args = ["run"],
    cmd = "@com_github_golangci_golangci-lint//cmd/golangci-lint",
)

workspace_binary(
    name = "lint-full",
    args = ["run --fast=false"],
    cmd = "@com_github_golangci_golangci-lint//cmd/golangci-lint",
)

filegroup(
    name = "all-srcs",
    srcs = glob(["**"]),
)

filegroup(
    name = "cluster-api-kustomize-yaml",
    srcs = glob([
        "vendor/sigs.k8s.io/cluster-api/config/crds/*.yaml",
        "vendor/sigs.k8s.io/cluster-api/config/rbac/*.yaml",
        "vendor/sigs.k8s.io/cluster-api/config/manager/*.yaml",
        "vendor/sigs.k8s.io/cluster-api/config/default/*.yaml",
    ]),
    visibility = ["//visibility:public"],
)

exports_files(glob([
    "WORKSPACE",
]))

go_library(
    name = "go_default_library",
    srcs = ["main.go"],
    importpath = "sigs.k8s.io/cluster-api-provider-aws",
    deps = [
        "//api/v1alpha2:go_default_library",
        "//controllers:go_default_library",
        "//pkg/record:go_default_library",
        "//vendor/k8s.io/apimachinery/pkg/runtime:go_default_library",
        "//vendor/k8s.io/client-go/kubernetes/scheme:go_default_library",
        "//vendor/k8s.io/klog:go_default_library",
        "//vendor/k8s.io/klog/klogr:go_default_library",
        "//vendor/sigs.k8s.io/cluster-api/api/v1alpha2:go_default_library",
        "//vendor/sigs.k8s.io/controller-runtime:go_default_library",
        "//vendor/sigs.k8s.io/controller-runtime/pkg/controller:go_default_library",
    ],
)

go_binary(
    name = "cluster-api-provider-aws",
    embed = [":go_default_library"],
)

# Build the manager
load("@io_bazel_rules_docker//go:image.bzl", "go_image")
load("@io_bazel_rules_docker//contrib:push-all.bzl", "docker_push")
load("@io_bazel_rules_docker//container:container.bzl", "container_bundle")
load("//build:stateful_set_patch.bzl", "stateful_set_patch")

go_image(
    name = "manager-amd64",
    embed = [":go_default_library"],
    goarch = "amd64",
    goos = "linux",
    pure = "on",
    visibility = ["//visibility:public"],
)

tags = [
    "{GIT_VERSION}",
    "$(MANAGER_IMAGE_TAG)",
]

images = {
    "{registry}/{name}:{tag}".format(
        registry = "$(REGISTRY)",
        name = "$(MANAGER_IMAGE_NAME)",
        tag = tag,
    ): ":manager-amd64"
    for tag in tags
}

container_bundle(
    name = "manager-image",
    images = images,
    tags = ["manual"],
    visibility = ["//visibility:public"],
)

docker_push(
    name = "manager-push",
    bundle = "manager-image",
    tags = ["manual"],
)

stateful_set_patch(
    name = "manager-version-patch",
    pull_policy = "$(PULL_POLICY)",
    registry = "$(REGISTRY)",
    tags = ["generated"],
    visibility = ["//visibility:public"],
)

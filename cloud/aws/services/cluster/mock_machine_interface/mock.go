// Copyright Â© 2018 The Kubernetes Authors.
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Automatically generated by MockGen. DO NOT EDIT!
// Source: sigs.k8s.io/cluster-api/pkg/client/clientset_generated/clientset/typed/cluster/v1alpha1 (interfaces: MachineInterface)

package mock_v1alpha1

import (
	gomock "github.com/golang/mock/gomock"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	v1alpha1 "sigs.k8s.io/cluster-api/pkg/apis/cluster/v1alpha1"
)

// Mock of MachineInterface interface
type MockMachineInterface struct {
	ctrl     *gomock.Controller
	recorder *_MockMachineInterfaceRecorder
}

// Recorder for MockMachineInterface (not exported)
type _MockMachineInterfaceRecorder struct {
	mock *MockMachineInterface
}

func NewMockMachineInterface(ctrl *gomock.Controller) *MockMachineInterface {
	mock := &MockMachineInterface{ctrl: ctrl}
	mock.recorder = &_MockMachineInterfaceRecorder{mock}
	return mock
}

func (_m *MockMachineInterface) EXPECT() *_MockMachineInterfaceRecorder {
	return _m.recorder
}

func (_m *MockMachineInterface) Create(_param0 *v1alpha1.Machine) (*v1alpha1.Machine, error) {
	ret := _m.ctrl.Call(_m, "Create", _param0)
	ret0, _ := ret[0].(*v1alpha1.Machine)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockMachineInterfaceRecorder) Create(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Create", arg0)
}

func (_m *MockMachineInterface) Delete(_param0 string, _param1 *v1.DeleteOptions) error {
	ret := _m.ctrl.Call(_m, "Delete", _param0, _param1)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockMachineInterfaceRecorder) Delete(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Delete", arg0, arg1)
}

func (_m *MockMachineInterface) DeleteCollection(_param0 *v1.DeleteOptions, _param1 v1.ListOptions) error {
	ret := _m.ctrl.Call(_m, "DeleteCollection", _param0, _param1)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockMachineInterfaceRecorder) DeleteCollection(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DeleteCollection", arg0, arg1)
}

func (_m *MockMachineInterface) Get(_param0 string, _param1 v1.GetOptions) (*v1alpha1.Machine, error) {
	ret := _m.ctrl.Call(_m, "Get", _param0, _param1)
	ret0, _ := ret[0].(*v1alpha1.Machine)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockMachineInterfaceRecorder) Get(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Get", arg0, arg1)
}

func (_m *MockMachineInterface) List(_param0 v1.ListOptions) (*v1alpha1.MachineList, error) {
	ret := _m.ctrl.Call(_m, "List", _param0)
	ret0, _ := ret[0].(*v1alpha1.MachineList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockMachineInterfaceRecorder) List(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "List", arg0)
}

func (_m *MockMachineInterface) Patch(_param0 string, _param1 types.PatchType, _param2 []byte, _param3 ...string) (*v1alpha1.Machine, error) {
	_s := []interface{}{_param0, _param1, _param2}
	for _, _x := range _param3 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "Patch", _s...)
	ret0, _ := ret[0].(*v1alpha1.Machine)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockMachineInterfaceRecorder) Patch(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Patch", _s...)
}

func (_m *MockMachineInterface) Update(_param0 *v1alpha1.Machine) (*v1alpha1.Machine, error) {
	ret := _m.ctrl.Call(_m, "Update", _param0)
	ret0, _ := ret[0].(*v1alpha1.Machine)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockMachineInterfaceRecorder) Update(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Update", arg0)
}

func (_m *MockMachineInterface) UpdateStatus(_param0 *v1alpha1.Machine) (*v1alpha1.Machine, error) {
	ret := _m.ctrl.Call(_m, "UpdateStatus", _param0)
	ret0, _ := ret[0].(*v1alpha1.Machine)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockMachineInterfaceRecorder) UpdateStatus(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "UpdateStatus", arg0)
}

func (_m *MockMachineInterface) Watch(_param0 v1.ListOptions) (watch.Interface, error) {
	ret := _m.ctrl.Call(_m, "Watch", _param0)
	ret0, _ := ret[0].(watch.Interface)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockMachineInterfaceRecorder) Watch(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Watch", arg0)
}
